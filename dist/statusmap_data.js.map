{"version":3,"sources":["../src/statusmap_data.ts"],"names":["Bucket","ts","from","to","value","values","push","length","BucketMatrix","yid","xid","buckets","hasData","targets","map","target"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;wBACMA,M;;;AACJ;AAEA;AAEqB;AACrB;AAEA;AAEA;AAGA;AAGA;AAGA;AAMA;AAGA;AAGA,0BAAc;AAAA;;AAAA,sCA7BD,CA6BC;;AAAA,0CA3BE,EA2BF;;AAAA,2CA1BG,EA0BH;;AAAA,kDAxBY,KAwBZ;;AAAA,kDAtBY,KAsBZ;;AAAA,qCApBF,EAoBE;;AAAA,0CAnBG,EAmBH;;AAAA,qCAjBF,CAiBE;;AAAA,uCAhBA,CAgBA;;AAAA,wCAdC,CAcD;;AAAA,sCAbD,CAaC;;AAAA,2CAXI,CAWJ;;AAAA,yCAVE,CAUF;;AAAA,8CARQ,KAQR;;AAAA,4CALK,CAKL;;AAAA,4CAJK,CAIL;;AAAA,yCAFE,CAEF;AACb;;;;iCAEMC,E,EAAqB;AAC1B,mBAAOA,EAAE,IAAI,KAAKC,IAAX,IAAmBD,EAAE,IAAI,KAAKE,EAArC;AACD;;;8BAEGC,K,EAAY;AACd,iBAAKC,MAAL,CAAYC,IAAZ,CAAiBF,KAAjB;AACD;;;iCAEM,CACL;AACD;;;oCAEkB;AACjB,mBAAO,KAAKC,MAAL,CAAYE,MAAZ,IAAsB,CAA7B;AACD;;;;;;8BAKGC,Y;;;AACJ;AAMA;AAOyB;AAEzB,gCAAc;AAAA;;AAAA,2CAd0B,EAc1B;;AAAA,4CAbK,CAaL;;AAAA,4CAZK,CAYL;;AAAA,kDAXY,KAWZ;;AAAA,kDAVY,KAUZ;;AAAA,gDARU,KAQV;;AAAA,2CANM,EAMN;;AAAA,2CALI,CAKJ;;AAAA,8CAJO,CAIP;;AAAA,+CAFQ,CAER;AACb;;;;8BAEGC,G,EAAaC,G,EAAqB;AACpC,gBAAID,GAAG,IAAI,KAAKE,OAAhB,EAAyB;AACvB,kBAAID,GAAG,IAAI,KAAKC,OAAL,CAAaF,GAAb,CAAX,EAA8B;AAC5B,uBAAO,KAAKE,OAAL,CAAaF,GAAb,EAAkBC,GAAlB,CAAP;AACD;AACF;;AACD,mBAAO,IAAIV,MAAJ,EAAP;AACD;;;oCAEkB;AAAA;;AACjB,gBAAIY,OAAO,GAAG,KAAd;;AACA,gBAAI,KAAKC,OAAL,CAAaN,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,mBAAKM,OAAL,CAAaC,GAAb,CAAiB,UAACC,MAAD,EAAmB;AAClC,oBAAI,KAAI,CAACJ,OAAL,CAAaI,MAAb,EAAqBR,MAArB,GAA8B,CAAlC,EAAqC;AACnCK,kBAAAA,OAAO,GAAG,IAAV;AACD;AACF,eAJD;AAKD;;AACD,mBAAOA,OAAP;AACD","sourcesContent":["// A holder of a group of values\nclass Bucket {\n  // uniq id\n  id: number = 0;\n  // Array of values in this bucket\n  values: any[] = [];\n  columns: any[] = []; // From pr/86\n  // a bucket has multiple values\n  multipleValues: boolean = false;\n  // a bucket has values that has no mapped color\n  noColorDefined: boolean = false;\n  // y label\n  y: string = \"\";\n  yLabel: string = \"\";\n  // This value can be used to calculate a x coordinate on a graph\n  x: number = 0;\n  xid: number = 0;\n  // a time range of this bucket\n  from: number = 0;\n  to: number = 0;\n  // to and from relative to real \"from\"\n  relFrom: number = 0;\n  relTo: number = 0;\n\n  mostRecent: boolean = false;\n\n  // Saved minimum and maximum of values in this bucket\n  minValue: number = 0;\n  maxValue: number = 0;\n  // A value if multiple values is not allowed\n  value: number = 0;\n\n  constructor() {\n  }\n\n  belong(ts: number): boolean {\n    return ts >= this.from && ts <= this.to;\n  }\n\n  put(value: any) {\n    this.values.push(value);\n  }\n\n  done() {\n    // calculate min, max, value\n  }\n\n  isEmpty(): boolean {\n    return this.values.length == 0;\n  }\n\n}\n\n\nclass BucketMatrix {\n  // buckets for each y label\n  buckets: {[yLabel: string]: Bucket[]} = {};\n  maxValue: number = 0;\n  minValue: number = 0;\n  multipleValues: boolean = false;\n  noColorDefined: boolean = false;\n  // a flag that indicate that buckets has stub values\n  noDatapoints: boolean = false;\n\n  targets: string[] = [];\n  rangeMs: number = 0;\n  intervalMs: number = 0;\n\n  xBucketSize: number = 0; // TODO remove: a transition from CardsData\n\n  constructor() {\n  }\n\n  get(yid: string, xid: number): Bucket {\n    if (yid in this.buckets) {\n      if (xid in this.buckets[yid]) {\n        return this.buckets[yid][xid];\n      }\n    }\n    return new Bucket();\n  }\n\n  hasData(): boolean {\n    let hasData = false;\n    if (this.targets.length > 0) {\n      this.targets.map((target:string) => {\n        if (this.buckets[target].length > 0) {\n          hasData = true;\n        }\n      });\n    }\n    return hasData;\n  }\n}\n\nexport {Bucket, BucketMatrix };"],"file":"statusmap_data.js"}